package com.example.newswave.data.model


import androidx.room.Entity
import androidx.room.PrimaryKey
import com.google.gson.annotations.SerializedName
import java.io.Serializable

@Entity(
    tableName = "articles"
)
data class Article(
    @PrimaryKey(autoGenerate = true)
    val id:Int? = null,
    @SerializedName("author")
    val author: String?,
    @SerializedName("content")
    val content: String?,
    @SerializedName("description")
    val description: String?,
    @SerializedName("publishedAt")
    val publishedAt: String?,
    @SerializedName("source")
    val source: Source?,
    @SerializedName("title")
    val title: String?,
    @SerializedName("url")
    val url: String?,
    @SerializedName("urlToImage")
    val urlToImage: String?
):Serializable

/**
 C1.

 In order to create database table from this data class Article model,  annotate it with
 room annotations and mark it with room entity class as @Entity.
 The name for the database table: article, also add primary key to table, so int id field added
 as PK and autogenerated = true.

 Since some of the properties can have null values to avoid errors, let make it all nullable.
 But we have problem with Source object reference variable because Source represents another data
 class Source(check) which has two properties: id and name.
 For situation like this, where we have object reference variables other than strings in an entity
 class, there are two solutions:
 a. Simplest but inefficient solution: Annotating Source data class as an entity class and
 saving source data to a separate database table. But this Source class only two properties:
 id and name. All we want from the source data class is displaying name of the source.
 There is no need to create a separate table for source data. Second solution is b.

 b.Create a converter class for source data using room type converter annotation.
 database package creation and Converters class created.

 */